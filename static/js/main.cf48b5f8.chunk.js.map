{"version":3,"sources":["api.ts","components/Search/Search.tsx","images/mist.png","video/rain.mp4","video/sunny.mp4","video/cloud.mp4","video/snow2.mp4","components/Main/Main.tsx","components/App/App.tsx","index.tsx"],"names":["API_GEO","Search","setCurrentCity","useState","city","setCity","placeholder","setPlaceholder","emptyInput","setEmptyInput","handleButtonClick","trim","className","type","value","onChange","e","length","target","onKeyPress","key","onClick","Main","dataDaily","temperature","textColor","tempType","setTemptype","transformFah","setTransformFah","transformCel","setTransformCel","toFahrenheit","num","Math","round","daily","map","day","Date","dt","toLocaleString","weekday","month","style","backgroundImage","weather","icon","temp","pressure","wind_speed","humidity","transform","borderColor","current","main","App","setDataDaily","currentCity","background","setBackground","video","setVideo","latitude","setLat","longitude","setLon","cityName","setCityName","country","setCountry","setTextColor","useEffect","navigator","geolocation","getCurrentPosition","position","coords","fetch","process","then","res","json","lat","lon","name","catch","er","getReverseGeo","cloud","fog","rain","snow","sun","color","src","autoPlay","loop","muted","height","width","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf48b5f8.chunk.js","sourcesContent":["const API = 'https://api.openweathermap.org/data/2.5/onecall?';\nconst API_GEO = 'https://api.openweathermap.org/geo/1.0/';\n\nexport const getDailyApibyCoords = (lat: number, lon: number) => {\n  return fetch(`${API}lat=${lat}&lon=${lon}&exclude=hourly&appid=${process.env.REACT_APP_KEY}`)\n    .then(res => res.json())\n};\n\nexport const getGeo = (city: string) => {\n  return fetch(`${API_GEO}direct?q=${city}&limit=1&appid=${process.env.REACT_APP_KEY}`)\n    .then(res => res.json())\n};\n\nexport const getReverseGeo = (lat: number, lon: number) => {\n  return fetch(`${API_GEO}reverse?lat=${lat}&lon=${lon}&limit=1&appid=${process.env.REACT_APP_KEY}`)\n    .then(res => res.json())\n};\n","import React from \"react\";\nimport { useState } from \"react\";\nimport './style.scss';\n\ntype Props = {\n  setCurrentCity: (arg: string) => void,\n};\n\nexport const Search: React.FC<Props> = ({ setCurrentCity }) => {\n  const [city, setCity] = useState('');\n  const [placeholder, setPlaceholder] = useState('Weather in your city');\n  const [emptyInput, setEmptyInput] = useState(false);\n\n\n  const handleButtonClick = () => {\n    if (city.trim() === \"\") {\n      setPlaceholder('')\n      setEmptyInput(true);\n    } else {\n      setCurrentCity(city);\n      setPlaceholder('Weather in your city');\n    }\n  };\n\n  const handleInputClick = () => {\n    if (city.length === 0) {\n      setPlaceholder('Weather in your city');\n      setEmptyInput(false);\n    }\n  };\n\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (city.length === 0) {\n      setPlaceholder('Weather in your city');\n      setEmptyInput(false);\n    }\n\n    setCity(e.target.value);\n  };\n\n  const handleKeyPress = (e: any) => {\n    if (city.trim().length === 0) {\n      setPlaceholder('')\n      setEmptyInput(true);\n    }\n\n    if (e.key === 'Enter') {\n      handleButtonClick();\n    }\n  }\n\n  \n  return (\n    <div className=\"search-container\">\n      <div className=\"search\">\n        <div className=\"search__box\"></div>\n        <h1 className=\"search__title\">WEATHER</h1>\n        <div className=\"search__form\">\n          <div className=\"input-wrap\">\n            <input\n              className=\"search__input\"\n              type=\"text\"\n              value={city}\n              onChange={handleInputChange}\n              onKeyPress={handleKeyPress}\n              onClick={handleInputClick}\n              placeholder={placeholder}\n\n            />\n            {emptyInput && (\n              <p className=\"empty-input\">Please write the city</p>\n            )}\n          </div>\n          <button\n            className=\"search__button\"\n            type=\"button\"\n            onClick={handleButtonClick}\n          >\n            search\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/mist.e7d81e06.png\";","export default __webpack_public_path__ + \"static/media/rain.1146ba59.mp4\";","export default __webpack_public_path__ + \"static/media/sunny.806852fc.mp4\";","export default __webpack_public_path__ + \"static/media/cloud.9d6406ae.mp4\";","export default __webpack_public_path__ + \"static/media/snow2.f22d48fd.mp4\";","import React, { useState } from \"react\";\nimport { DataDaily } from '../../Types/Data';\nimport './style.scss';\n\ntype Props = {\n  textColor: string,\n  dataDaily: DataDaily,\n  temperature: (arg: number) => number,\n}\n\nexport const Main: React.FC<Props> = ({ dataDaily, temperature, textColor }) => {\n  const [tempType, setTemptype] = useState('C');\n  const [transformFah, setTransformFah] = useState(\"180deg\");\n  const [transformCel, setTransformCel] = useState(\"0\");\n\n  const toFahrenheit = (num: number) => {\n    return Math.round((temperature(num) * 9 / 5) + 32);\n  }\n\n  const changeTempType = () => {\n    if (tempType === 'C') {\n      setTemptype('F')\n      setTransformFah(\"0\")\n      setTransformCel(\"180deg\")\n    } else {\n      setTemptype('C')\n      setTransformFah(\"180deg\")\n      setTransformCel(\"0\")\n    }\n  };\n\n  return (\n    (dataDaily.daily) ? (\n      <main className=\"main\">\n        <div className=\"main__data-info\">\n          <div className=\"main__data-box\"></div>\n          <div className=\"table\">\n            <div className=\"table__row\">\n              {dataDaily.daily.map(day => (\n                <div className=\"table__column\" key={day.dt}>\n                  <div className=\"table__title\">\n                    <h3>{new Date(day.dt * 1000).toLocaleString(\"en-US\", { weekday: \"long\" })}</h3>\n                    <h3 className=\"table__title--red\">{new Date(day.dt * 1000).toLocaleString(\"en-US\", { day: \"numeric\" })}</h3>\n                    <h3>{new Date(day.dt * 1000).toLocaleString(\"en-US\", { month: \"long\" })}</h3>\n                  </div>\n                  <div\n                    className=\"table__icon\"\n                    style={{\n                      backgroundImage: `url(http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png)`,\n                    }}\n                  >\n                  </div>\n                  <div className=\"table__day-info\">\n                    {(tempType === \"C\") ? (\n                      <p className=\"table__item-info\">\n                        <span>temp:</span>\n                        <span>{temperature(day.temp.day)} C&#176;</span>\n                      </p>\n                    ) : (\n                      <p className=\"table__item-info\">\n                        <span>temp:</span>\n                        <span>{toFahrenheit(day.temp.day)} F&#176;</span>\n                      </p>\n                    )}\n                    <p className=\"table__item-info\">\n                      <span>pressure:</span>\n                      {day.pressure} hPa\n                    </p>\n                    <p className=\"table__item-info\">\n                      <span>w. speed:</span>\n                      {day.wind_speed} m/s\n                    </p>\n                    <p className=\"table__item-info\">\n                      <span>humidity:</span>\n                      {day.humidity} %\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"main__temp\">\n          <div\n            className=\"main__temp-value\"\n            onClick={changeTempType}\n          >\n            <div\n              className=\"celsius\"\n              style={{\n                transform: `rotateY(${transformCel})`,\n                borderColor: textColor,\n              }}\n            >\n              &lt; <span className=\"main__temp--size\">{temperature(dataDaily.current.temp)}</span> <span className=\"main__temp-value--size\">C&#176;</span> &gt;\n            </div>\n            <div\n              className=\"fahrenheit\"\n              style={{\n                transform: `rotateY(${transformFah})`,\n                borderColor: textColor,\n              }}\n            >\n              &lt; <span className=\"main__temp--size\">{toFahrenheit(dataDaily.current.temp)}</span> <span className=\"main__temp-value--size\">F&#176;</span> &gt;\n            </div>\n          </div>\n          <div className=\"main__temp-day\">\n            <h2 className=\"main__temp-day-title\">\n              {dataDaily.current.weather[0].main}\n            </h2>\n            <p className=\"main__temp-day-info\">\n              pressure: {dataDaily.current.pressure} hPa\n            </p>\n            <p className=\"main__temp-day-info\">\n              w. speed: {dataDaily.current.wind_speed} m/s\n            </p>\n            <p className=\"main__temp-day-info\">\n              humidity: {dataDaily.current.humidity} %\n            </p>\n          </div>\n        </div>\n      </main>\n    ) : (\n      <div>error</div>\n    )\n  );\n};\n","import { useEffect, useState  } from 'react';\nimport { getDailyApibyCoords, getGeo, getReverseGeo } from '../../api';\nimport { Search } from '../Search/Search';\nimport './style.scss';\nimport fog from '../../images/mist.png';\nimport rain from '../../video/rain.mp4';\nimport sun from '../../video/sunny.mp4';\nimport cloud from '../../video/cloud.mp4';\nimport snow from '../../video/snow2.mp4';\nimport { Main } from '../Main/Main';\nimport { DataDaily } from '../../Types/Data';\nimport Loader from \"react-loader-spinner\";\n\nconst App = () => {\n  const [dataDaily, setDataDaily] = useState<DataDaily | any>({});\n  const [currentCity, setCurrentCity] = useState(\"\");\n  const [background, setBackground] = useState(\"\");\n  const [video, setVideo] = useState(\"\");\n  const [latitude, setLat] = useState(0);\n  const [longitude, setLon] = useState(0);\n  const [cityName, setCityName] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [textColor, setTextColor] = useState(\"#000\");\n\n  const temperature = (num: number) => {\n    return Math.round(num - 273.15);\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLon(position.coords.longitude);\n      setLat(position.coords.latitude);\n    });\n  }, []);\n\n  useEffect(() => {\n    currentCity && getGeo(currentCity)\n      .then(res => {\n        setLat(res[0].lat)\n        setLon(res[0].lon)\n        setCityName(res[0].name)\n        setCountry(res[0].country)\n      })\n      .catch(er => setDataDaily({}))\n  }, [currentCity]);  \n\n  useEffect(() => {\n    latitude && longitude && getDailyApibyCoords(latitude, longitude)\n      .then(res => {\n        setDataDaily(res)\n      })\n      .catch(er => setDataDaily({}))\n    \n    latitude && longitude && getReverseGeo(latitude, longitude)\n      .then(res => {\n        setCityName(res[0].name)\n        setCountry(res[0].country)\n      })\n      .catch(er => setDataDaily({}))\n  }, [latitude, longitude]);\n\n  useEffect(() => {\n    if (dataDaily.current) {\n      if (dataDaily.current.weather[0].main === \"Clouds\") {\n        setBackground('none')\n        setTextColor('#000')\n        setVideo(cloud)\n      } else if (dataDaily.current.weather[0].main === \"Mist\" && dataDaily.current.weather[0].main === \"Haze\") {\n        setBackground(`url(${fog})`)\n        setTextColor('#000')\n        setVideo(cloud)\n      } else if (dataDaily.current.weather[0].main === \"Rain\" || dataDaily.current.weather[0].main === \"Drizzle\" || dataDaily.current.weather[0].main === \"\tThunderstorm\") {\n        setBackground(`none`)\n        setVideo(rain)\n        setTextColor('#000')\n      } else if (dataDaily.current.weather[0].main === \"Snow\") {\n        setBackground('none')\n        setVideo(snow)\n        setTextColor('#fff')\n      } else if (dataDaily.current.weather[0].main === \"Clear\") {\n        setBackground('none')\n        setVideo(sun)\n        setTextColor('#000')\n      } else {\n        setVideo('none')\n        setBackground(`none`)\n      }\n    } \n  }, [dataDaily]);\n\n  return (\n    <>\n      {dataDaily.current ? (\n        <div className=\"page\" style={{\n          backgroundImage: background,\n          color: textColor,\n        }} >\n          <video className=\"video\" src={video} autoPlay loop muted></video>\n          <div className=\"header\">\n            <Search setCurrentCity={setCurrentCity} />\n            <div className=\"header__title\">\n              <div className=\"header__city\"\n              >{cityName} ({country})</div>\n            </div>\n          </div>\n          <Main\n            textColor={textColor}\n            dataDaily={dataDaily}\n            temperature={temperature}\n          />\n        </div>\n      ) : (\n        <div className=\"page\" style={{\n          backgroundImage: background,\n        }} >\n          <video className=\"video\" src={video} autoPlay loop muted></video>\n          <div className=\"header\">\n            <Search setCurrentCity={setCurrentCity} />\n            <div className=\"header__title\">\n                <div className=\"header__city\">City not found</div>\n            </div>\n          </div>\n          <main className=\"loader\">\n            <Loader\n              type=\"ThreeDots\"\n              color=\"gold\"\n              height={100}\n              width={100}\n            />\n          </main>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default App;","import ReactDOM from 'react-dom';\nimport './style.scss';\nimport App from './components/App/App';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}